{
    "summary": {
        "repair_model": "project_part2_models/Phi-3-SFT-Repair_r16_alpha32_combined",
        "RPass": 80.0,
        "REdit": 14.6,
        "timestamp": "2025-02-05T12:04:19.289914"
    },
    "results": {
        "problem_1_prog_1": {
            "repair": {
                "correct": true,
                "repair": "def search(x, seq):\n    \"\"\" Takes in a value x and a sorted sequence seq, and returns the\n    position that x should go to such that the sequence remains sorted \"\"\"\n    for i in range(len(seq)):\n        if x <= seq[i]:\n            return i\n    return len(seq)  # Fixed by returning the length of seq instead of i + 1",
                "distance": 4
            }
        },
        "problem_1_prog_2": {
            "repair": {
                "correct": true,
                "repair": "def search(x, seq):\n    for i in range(len(seq)):\n        if x <= seq[i]:  # Changed from x < seq[i-1] to x <= seq[i] to correctly handle the case where x is equal to the last element in seq.\n            return i\n    return len(seq)  # If x is greater than all elements in seq, it should be placed at the end.",
                "distance": 38
            }
        },
        "problem_1_prog_3": {
            "repair": {
                "correct": true,
                "repair": "def search(x, seq):\n    for i, elem in enumerate(seq):\n        if x <= elem:\n            return i\n    return len(seq)  # Moved this line outside of the else block",
                "distance": 5
            }
        },
        "problem_1_prog_4": {
            "repair": {
                "correct": true,
                "repair": "def search(x, seq):\n    # Check if the sequence is empty by checking if it is not a list or tuple\n    if not seq:  # This handles both empty list and empty tuple\n        return 0\n    else:\n        for i, elem in enumerate (seq):\n            if x <= elem:\n                return i\n        # If x is greater than all elements, it should be placed at the end\n        return len(seq)",
                "distance": 19
            }
        },
        "problem_1_prog_5": {
            "repair": {
                "correct": false,
                "repair": "def search(x, seq):\n    if not seq:  # Check if the sequence is empty\n        return 0\n    elif x < seq[0]:  # If x is less than the first element, return 0\n        return 0\n    elif x > seq[-1]:  # If x is greater than the last element, return the length of the sequence\n        return len(seq)\n    else:\n        for i in range(len(seq) - 1):\n            if seq[i] == x:  # If x is equal to the current element, return the current index\n                return i\n            elif seq[i] < x < seq[i+1]:  # If x is between the current and next element, return the current index\n                return i + 1",
                "distance": -1
            }
        },
        "problem_2_prog_1": {
            "repair": {
                "correct": true,
                "repair": "def unique_day(day, possible_birthdays):\n    count = 0\n    for birthday in possible_birthdays:\n        if birthday[1] == day:\n            count += 1\n    return count == 1\n\ndef unique_month(month, possible_birthdays):\n    count = 0\n    for birthday in possible_birthdays:\n        if birthday[0] == month:\n            count += 1\n    return count == 1\n\ndef contains_unique_day(month, possible_birthdays):\n    for birthday in possible_birthdays:\n        if birthday[0] == month:\n            if unique_day(birthday[1], possible_birthdays):\n                return True\n    return False",
                "distance": 1
            }
        },
        "problem_2_prog_2": {
            "repair": {
                "correct": true,
                "repair": "def unique_day(day, possible_birthdays):\n    counter = 0\n    for birthdate in possible_birthdays:\n        if str(day) == birthdate[1]:\n            counter += 1\n    if counter == 1:  # Changed from counter > 1 to counter == 1\n        return True\n    else:\n        return False\n\ndef unique_month(month, possible_birthdays):\n    counter = 0\n    for birthdate in possible_birthdays:\n        if month == birthdate[0]:\n            counter += 1\n    if counter == 1:  # Changed from counter > 1 to counter == 1\n        return True\n    else:\n        return False\n\ndef contains_unique_day(month, possible_birthdays):\n    counter = 0\n    for birthdate in possible_birthdays:\n        if month == birthdate[0]:\n            tp = unique_day(birthdate[1], possible_birthdays)\n            if tp == True:\n                counter += 1\n    if counter >= 1:\n        return True\n    else:\n        return False",
                "distance": 8
            }
        },
        "problem_2_prog_3": {
            "repair": {
                "correct": false,
                "repair": "def unique_day(date, possible_birthdays):\n    count = 0\n    for i in possible_birthdays:\n        if i[1] == date:\n            count += 1\n    return count == 1  # Changed from >=2 to ==1 to check for exactly one occurrence\n\ndef unique_month(month, possible_birthdays):\n    count = 0\n    for i in possible_birthdays:\n        if i[0] == month:\n            count += 1\n    return count == 1  # Changed from >=2 to ==1 to check for exactly one occurrence\n\ndef contains_unique_day(month, possible_birthdays):\n    for i in possible_birthdays:\n        if i[0] == month:\n            tf = False  # Initialize tf to False\n            if unique_day(i[1], possible_birthdays):\n                tf = True\n    return tf",
                "distance": -1
            }
        },
        "problem_2_prog_4": {
            "repair": {
                "correct": true,
                "repair": "def unique_day(day, possible_birthdays):\n    result = ()\n    for p in possible_birthdays:\n        pd = p[1]\n        if day == pd:\n            result = result + (day,)\n    if len(result) == 1:  # Changed from > 1 to == 1\n        return True\n    return False\n\ndef unique_month(month, possible_birthdays):\n    result = ()\n    for p in possible_birthdays:\n        m = p[0]\n        if month == m:\n            result = result + (m,)\n    if len(result) == 1:  # Changed from > 1 to == 1\n        return True\n    return False\n\ndef contains_unique_day(month, possible_birthdays):\n    days_in_month = [p[1] for p in possible_birthdays if p[0] == month]\n    for day in days_in_month:\n        if unique_day(day, possible_birthdays):\n            return True\n    return False",
                "distance": 99
            }
        },
        "problem_2_prog_5": {
            "repair": {
                "correct": true,
                "repair": "def count_dates(date, possible_birthdays):\n    count = 0\n    for i in possible_birthdays:\n        if i[1] == date:\n            count += 1\n    return count\n    \ndef unique_day(date, possible_birthdays):\n    if count_dates(date, possible_birthdays) == 1:\n        return True\n    else:\n        return False\n    \ndef count_months(month, possible_birthdays):\n    count = 0\n    for i in possible_birthdays:\n        if i[0] == month:\n            count += 1\n    return count\n    \ndef unique_month(month, possible_birthdays):\n    if count_months(month, possible_birthdays) == 1:\n        return True\n    else:\n        return False\n\ndef contains_unique_day(month, possible_birthdays):\n    days_in_month = ()\n    for i in possible_birthdays:\n        if i[0] == month:\n            days_in_month += (i,)\n    for x in range(len(days_in_month)):\n        if unique_day(days_in_month[x][1], possible_birthdays):\n            return True\n    return False  # Moved return False outside the loop",
                "distance": 5
            }
        },
        "problem_3_prog_1": {
            "repair": {
                "correct": true,
                "repair": "def remove_extras(lst):\n    # Initialize an empty tuple to keep track of occurrences\n    occurrences = ()\n    new_lst = []\n    for item in lst:\n        # Check if the item is not in occurrences\n        if item not in occurrences:\n            occurrences += (item,)\n            new_lst.append(item)\n    return new_lst",
                "distance": 3
            }
        },
        "problem_3_prog_2": {
            "repair": {
                "correct": false,
                "repair": "def remove_extras(lst):\n    new = []\n    for x in lst:\n        if lst.count(x) == 1:  # Check if the element occurs exactly once\n            new.append(x)  # Use append() method to add the element to new list\n    return new",
                "distance": -1
            }
        },
        "problem_3_prog_3": {
            "repair": {
                "correct": true,
                "repair": "def remove_extras(lst):\n    store = []\n    for ele in lst:\n        if ele not in store:\n            store.append(ele)\n    return store",
                "distance": 11
            }
        },
        "problem_3_prog_4": {
            "repair": {
                "correct": true,
                "repair": "def remove_extras(lst):\n    seen = set()\n    result = []\n    for x in lst:\n        if x not in seen:\n            seen.add(x)\n            result.append(x)\n    return result",
                "distance": 39
            }
        },
        "problem_3_prog_5": {
            "repair": {
                "correct": true,
                "repair": "def remove_extras(lst):\n    new_lst = []\n    for i in lst:\n        if i not in new_lst:\n            new_lst.append(i)  # Fixed: Use append() to add an element to the list\n        else:\n            continue\n    return new_lst",
                "distance": 4
            }
        },
        "problem_4_prog_1": {
            "repair": {
                "correct": false,
                "repair": "def sort_age(lst):\n    product = []\n    while lst:\n        smallest = lst[0]\n        for i in lst:\n            if i[1] < smallest[1]:  # Changed the comparison operator from '>' to '<'\n                smallest = i\n        lst.remove(smallest)\n        product.append(smallest)\n    return product",
                "distance": -1
            }
        },
        "problem_4_prog_2": {
            "repair": {
                "correct": true,
                "repair": "def sort_age(lst):\n    # The original code used sort() which sorts the list in place and returns None.\n    # To fix this, we use sorted() which returns a new sorted list.\n    return sorted(lst, key=lambda x: x[1], reverse=True)",
                "distance": 8
            }
        },
        "problem_4_prog_3": {
            "repair": {
                "correct": true,
                "repair": "def sort_age(lst):\n    new = []\n    while lst:\n        largest = lst[0]\n        for ele in lst:\n            if ele[1] > largest[1]:  # Fixed the comparison to compare ages\n                largest = ele\n        lst.remove(largest)  # Corrected the variable name from 'a' to 'lst'\n        new.append(largest)\n    return new",
                "distance": 5
            }
        },
        "problem_4_prog_4": {
            "repair": {
                "correct": false,
                "repair": "def merge(one, two):\n    new_tup = []\n    while one and two:  # Changed from while left and right to while one and two\n        if one[0][1] < two[0][1]:\n            new_tup.append(one.pop(0))\n        else:\n            new_tup.append(two.pop(0))\n    # Handle the case where one or two is empty\n    new_tup.extend(one or two)\n    return new_tup\n\ndef sort_age(lst):\n    n = len(lst)\n    if n < 2:\n        return lst\n    left = lst[:n//2]  # Changed from n/2 to n//2 for integer division\n    right = lst[n//2:]\n    return merge(left, right)",
                "distance": -1
            }
        },
        "problem_4_prog_5": {
            "repair": {
                "correct": true,
                "repair": "def sort_age(lst):\n    final = []\n    while lst:\n        old = lst[0]\n        for i in lst:\n            if old[1] < i[1]:\n                old = i\n        final.append(old)\n        lst.remove(old)\n    return final",
                "distance": 2
            }
        },
        "problem_5_prog_1": {
            "repair": {
                "correct": true,
                "repair": "def top_k(lst, k):\n    result = []\n    while k > 0:  # Changed from k >= 0 to k > 0 to correctly handle the case when k is 0\n        big = max(lst)\n        result.append(big)\n        lst.remove(big)\n        k -= 1\n    return result",
                "distance": 1
            }
        },
        "problem_5_prog_2": {
            "repair": {
                "correct": true,
                "repair": "def top_k(lst, k):\n    if lst == []:\n        return []\n    sort = []\n    while lst:\n        largest = lst[0]\n        for i in lst:\n            if i > largest:  # Fixed the comparison from i[1] > largest[1] to i > largest\n                largest = i\n        lst.remove(largest)\n        sort.append(largest)\n    return sort[:k]",
                "distance": 9
            }
        },
        "problem_5_prog_3": {
            "repair": {
                "correct": true,
                "repair": "def top_k(lst, k):\n    # Renamed the list variable to avoid conflict with the built-in list function\n    new_list = []\n    while len(new_list) < k:\n        a = max(lst)\n        lst.remove(a)\n        new_list.append(a)\n    return new_list",
                "distance": 6
            }
        },
        "problem_5_prog_4": {
            "repair": {
                "correct": true,
                "repair": "def top_k(lst, k):\n    sort = []\n    while lst:\n        largest = lst[0]\n        for element in lst:\n            if element > largest:\n                largest = element\n        lst.remove(largest)\n        sort.append(largest)\n    return sort[:k]",
                "distance": 2
            }
        },
        "problem_5_prog_5": {
            "repair": {
                "correct": true,
                "repair": "def top_k(lst, k):\n    new = []\n    while len(new) < k:  # Ensure we only append the top k elements\n        max_val = max(lst)  # Find the maximum value in the list\n        new.append(max_val)  # Append the maximum value to the new list\n        lst.remove(max_val)  # Remove the maximum value from the original list to avoid duplicates\n    return new",
                "distance": 23
            }
        }
    }
}