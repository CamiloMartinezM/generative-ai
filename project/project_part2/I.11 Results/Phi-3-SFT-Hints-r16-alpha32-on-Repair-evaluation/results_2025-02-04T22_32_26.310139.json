{
    "summary": {
        "repair_model": "project_part2_models/Phi-3-SFT-Hints_r16_alpha32",
        "RPass": 72.0,
        "REdit": 21.22222222222222,
        "timestamp": "2025-02-04T22:32:26.310139"
    },
    "results": {
        "problem_1_prog_1": {
            "repair": {
                "correct": true,
                "repair": "def search(x, seq):\n    \"\"\" Takes in a value x and a sorted sequence seq, and returns the\n    position that x should go to such that the sequence remains sorted \"\"\"\n    if not seq:  # Check if the sequence is empty\n        return 0\n    for i, element in enumerate(seq):\n        if x <= element:\n            return i\n    return len(seq)  # If x is greater than all elements, it should be at the end",
                "distance": 23
            }
        },
        "problem_1_prog_2": {
            "repair": {
                "correct": true,
                "repair": "def search(x, seq):\n    if not seq:  # Check if the sequence is empty\n        return 0\n    for i, element in enumerate(seq):\n        if x <= element:  # Check if x is less than or equal to the current element\n            return i\n    return len(seq)  # If x is greater than all elements, return the length of the sequence",
                "distance": 49
            }
        },
        "problem_1_prog_3": {
            "repair": {
                "correct": true,
                "repair": "def search(x, seq):\n    if not seq:  # Check if the sequence is empty\n        return 0\n    for i, elem in enumerate(seq):\n        if x <= elem:\n            return i\n        elif i == len(seq) - 1:  # Check if we've reached the last element\n            return i + 1",
                "distance": 23
            }
        },
        "problem_1_prog_4": {
            "repair": {
                "correct": true,
                "repair": "def search(x, seq):\n    if seq == () or []:\n        return 0\n    else:\n        for i, elem in enumerate(seq):\n            if x <= elem:\n                return i\n        return len(seq)",
                "distance": 12
            }
        },
        "problem_1_prog_5": {
            "repair": {
                "correct": false,
                "repair": "def search(x, seq):\n    if not seq:\n        return 0\n    elif x < seq[0]:\n        return 0\n    elif x > seq[-1]:\n        return len(seq)\n    else:\n        for i in range(len(seq) - 1):\n            if seq[i] == x:\n                return i\n            elif seq[i] < x < seq[i+1]:\n                return i + 1",
                "distance": -1
            }
        },
        "problem_2_prog_1": {
            "repair": {
                "correct": true,
                "repair": "def unique_day(day, possible_birthdays):\n    count = 0\n    for birthday in possible_birthdays:\n        if birthday[1] == day:\n            count += 1\n    return count == 1\n\ndef unique_month(month, possible_birthdays):\n    count = 0\n    for birthday in possible_birthdays:\n        if birthday[0] == month:\n            count += 1\n    return count == 1\n\ndef contains_unique_day(month, possible_birthdays):\n    for birthday in possible_birthdays:\n        if birthday[0] == month:\n            if unique_day(birthday[1], possible_birthdays):\n                return True\n    return False",
                "distance": 1
            }
        },
        "problem_2_prog_2": {
            "repair": {
                "correct": true,
                "repair": "def unique_day(date, possible_birthdays):\n    counter = 0\n    for birthdate in possible_birthdays:\n        if str(date) == birthdate[1]:\n            counter += 1\n    return counter == 1\n\ndef unique_month(month, possible_birthdays):\n    counter = 0\n    for birthdate in possible_birthdays:\n        if month == birthdate[0]:\n            counter += 1\n    return counter == 1\n\ndef contains_unique_day(month, possible_birthdays):\n    counter = 0\n    for birthdate in possible_birthdays:\n        if month == birthdate[0]:\n            if unique_day(birthdate[1], possible_birthdays):\n                counter += 1\n    return counter > 0",
                "distance": 54
            }
        },
        "problem_2_prog_3": {
            "repair": {
                "correct": true,
                "repair": "def unique_day(date, possible_birthdays):\n    count = 0\n    for i in possible_birthdays:\n        if i[1] == date:\n            count += 1\n    return count == 1\n\ndef unique_month(month, possible_birthdays):\n    count = 0\n    for i in possible_birthdays:\n        if i[0] == month:\n            count += 1\n    return count == 1\n\ndef contains_unique_day(month, possible_birthdays):\n    for i in possible_birthdays:\n        if i[0] == month:\n            if unique_day(i[1], possible_birthdays):\n                return True\n    return False",
                "distance": 21
            }
        },
        "problem_2_prog_4": {
            "repair": {
                "correct": true,
                "repair": "def unique_day(day, possible_birthdays):\n    count = 0\n    for p in possible_birthdays:\n        if day == p[1]:\n            count += 1\n    return count == 1\n\ndef unique_month(month, possible_birthdays):\n    count = 0\n    for p in possible_birthdays:\n        if month == p[0]:\n            count += 1\n    return count == 1\n\ndef contains_unique_day(month, possible_birthdays):\n    for p in possible_birthdays:\n        if month == p[0] and unique_day(p[1], possible_birthdays):\n            return True\n    return False",
                "distance": 75
            }
        },
        "problem_2_prog_5": {
            "repair": {
                "correct": false,
                "repair": "def count_dates(date, possible_birthdays):\n    count = 0\n    for i in possible_birthdays:\n        if i[1] == date:\n            count += 1\n    return count\n    \ndef unique_day(date, possible_birthdays):\n    if count_dates(date, possible_birthdays) == 1:\n        return True\n    else:\n        return False\n    \ndef count_months(month, possible_birthdays):\n    count = 0\n    for i in possible_birthdays:\n        if i[0] == month:\n            count += 1\n    return count\n    \ndef unique_month(month, possible_birthdays):\n    if count_months(month, possible_birthdays) == 1:\n        return True\n    else:\n        return False\n\n\ndef contains_unique_day(month, possible_birthdays):\n    days_in_month = ()\n    for i in possible_birthdays:\n        if i[0] == month:\n            days_in_month += (i,)\n    for x in range(len(days_in_month)):\n        if unique_day(days_in_month[x][1], possible_birthdays):\n            return True\n    return False\n\n\n# Testing the functions with the provided sample testcases\nprint(unique_day(\"1\", ((\"January\",\"1\"),(\"February\",\"1\"))))  # Expected Output: False\nprint(unique_month(\"January\", ((\"January\",\"1\"),(\"January\",\"2\"))))  # Expected Output: False\nprint(contains_unique_day(\"January\", ((\"January\",\"1\"),(\"January\",\"2\"))))  # Expected Output: True",
                "distance": -1
            }
        },
        "problem_3_prog_1": {
            "repair": {
                "correct": true,
                "repair": "def remove_extras(lst):\n    occurrences = set()\n    new_lst = []\n    for item in lst:\n        if item not in occurrences:\n            occurrences.add(item)\n            new_lst.append(item)\n    return new_lst",
                "distance": 7
            }
        },
        "problem_3_prog_2": {
            "repair": {
                "correct": false,
                "repair": "def remove_extras(lst):\n    new = []\n    for x in lst:\n        if lst.count(x) == 1:\n            new.append(x)\n    return new",
                "distance": -1
            }
        },
        "problem_3_prog_3": {
            "repair": {
                "correct": true,
                "repair": "def remove_extras(lst):\n    store = []\n    for ele in lst:\n        if ele not in store:\n            store.append(ele)\n    return store",
                "distance": 11
            }
        },
        "problem_3_prog_4": {
            "repair": {
                "correct": true,
                "repair": "def remove_extras(lst):\n    new_list = []\n    for x in lst:\n        if x not in new_list:\n            new_list.append(x)\n    return new_list",
                "distance": 36
            }
        },
        "problem_3_prog_5": {
            "repair": {
                "correct": true,
                "repair": "def remove_extras(lst):\n    new_lst = []\n    for i in lst:\n        if i not in new_lst:\n            new_lst.append(i)\n    return new_lst",
                "distance": 10
            }
        },
        "problem_4_prog_1": {
            "repair": {
                "correct": false,
                "repair": "def sort_age(lst):\n    product = []\n    while lst:\n        smallest = lst[0]\n        for i in lst:\n            if i[1] < smallest[1]:\n                smallest = i\n        lst.remove(smallest)\n        product.append(smallest)\n    return product",
                "distance": -1
            }
        },
        "problem_4_prog_2": {
            "repair": {
                "correct": true,
                "repair": "def sort_age(lst):\n    return sorted(lst, key=lambda x: x[1], reverse=True)",
                "distance": 4
            }
        },
        "problem_4_prog_3": {
            "repair": {
                "correct": true,
                "repair": "def sort_age(lst):\n    new = []\n    while lst:\n        largest = lst[0]\n        for ele in lst:\n            if ele[1] > largest[1]:\n                largest = ele\n        lst.remove(largest)\n        new.append(largest)\n    return new",
                "distance": 5
            }
        },
        "problem_4_prog_4": {
            "repair": {
                "correct": false,
                "repair": "def merge(one, two):\n    new_tup = []\n    while one and two:\n        if one[0][1] < two[0][1]:\n            new_tup.append(one.pop(0))\n        else:\n            new_tup.append(two.pop(0))\n    new_tup.extend(one if not two else two)\n    return new_tup\n\ndef sort_age(lst):\n    n = len(lst)\n    if n < 2:\n        return lst\n    mid = n // 2\n    left = lst[:mid]\n    right = lst[mid:]\n    return merge(sort_age(left), sort_age(right))",
                "distance": -1
            }
        },
        "problem_4_prog_5": {
            "repair": {
                "correct": true,
                "repair": "def sort_age(lst):\n    final = []\n    while lst:\n        oldest = lst[0]\n        for person in lst:\n            if person[1] > oldest[1]:\n                oldest = person\n        final.append(oldest)\n        lst.remove(oldest)\n    return final",
                "distance": 11
            }
        },
        "problem_5_prog_1": {
            "repair": {
                "correct": false,
                "repair": "def top_k(lst, k):\n    result = []\n    while k > 0 and lst:  # Ensure we don't go out of bounds and only proceed if k is positive and lst is not empty\n        big = max(lst)\n        result.append(big)\n        lst.remove(big)\n        k -= 1\n    return result[::-1]  # Reverse the result to ensure it's in descending order",
                "distance": -1
            }
        },
        "problem_5_prog_2": {
            "repair": {
                "correct": false,
                "repair": "def top_k(lst, k):\n    if lst == []:\n        return []\n    sort = []\n    while lst:\n        largest = lst[0]\n        for i in lst:\n            if i[1] > largest[1]:\n                largest = i\n        lst.remove(largest)\n        sort.append(largest)\n    return sort[:k]",
                "distance": -1
            }
        },
        "problem_5_prog_3": {
            "repair": {
                "correct": true,
                "repair": "def top_k(lst, k):\n    sorted_list = []\n    while len(sorted_list) < k:\n        a = max(lst)\n        lst.remove(a)\n        sorted_list.append(a)\n    return sorted_list",
                "distance": 4
            }
        },
        "problem_5_prog_4": {
            "repair": {
                "correct": true,
                "repair": "def top_k(lst, k):\n    sort = []\n    while lst and len(sort) < k:\n        largest = lst[0]\n        for element in lst:\n            if element > largest:\n                largest = element\n        lst.remove(largest)\n        sort.append(largest)\n    return sort",
                "distance": 13
            }
        },
        "problem_5_prog_5": {
            "repair": {
                "correct": true,
                "repair": "def top_k(lst, k):\n    new = []\n    while len(new) < k:\n        max_value = max(lst)\n        new.append(max_value)\n        lst.remove(max_value)\n    return new",
                "distance": 23
            }
        }
    }
}