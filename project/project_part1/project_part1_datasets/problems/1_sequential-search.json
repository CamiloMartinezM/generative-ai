{
    "id": 1,
    "title": "Sequential Search",
    "description": "Implement a search function that performs a sequential search. It takes in a value x and a sorted sequence seq, and returns the position that x should go to such that the sequence remains sorted. If the same value already exists, then place x before any previous occurence.",
    "additional_description": "The sequence is sorted in ascending order. If the sequence is empty, return 0. The sequence can be a list or a tuple of integers.",
    "signature": "def search(x, seq):\n\tpass",
    "tests": [
        {
            "input": "search(42, (-5, 1, 3, 5, 7, 10))",
            "output": "6"
        },
        {
            "input": "search(42, [1, 5, 10])",
            "output": "3"
        },
        {
            "input": "search(5, (1, 5, 10))",
            "output": "1"
        },
        {
            "input": "search(7, [1, 5, 10])",
            "output": "2"
        },
        {
            "input": "search(3, (1, 5, 10))",
            "output": "1"
        },
        {
            "input": "search(-5, (1, 5, 10))",
            "output": "0"
        },
        {
            "input": "search(10, (-5, -1, 3, 5, 7, 10))",
            "output": "5"
        },
        {
            "input": "search(-100, (-5, -1, 3, 5, 7, 10))",
            "output": "0"
        },
        {
            "input": "search(0, (-5, -1, 3, 5, 7, 10))",
            "output": "2"
        },
        {
            "input": "search(100, [])",
            "output": "0"
        },
        {
            "input": "search(-100, ())",
            "output": "0"
        }
    ]
}